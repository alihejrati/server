<script>
    alert = () => null
</script>
<script>
    var msg = {
        cb: () => {},
        cfrm: {
            title: "آیا از انجام این کار اطمینان دارید؟"
        },
        tbl: {
            empty: "داده ای یافت نشد"
        },
        btn: {
            confirm: 'بسیار خب',
            cancel: 'لغو عملیات'
        },
        success: {
            head: '',
            description: ''
        },
        error: {
            head: '',
            description: ''
        }
    };
    var reloadTbl = () => {
        log('0pppppppppppppppppppppppppppppppppppppppppppp')
        $('a[data-action="reload"]').click();   
    }
</script>
<script src="<%-template%>/robust-assets/js/plugins/ui/tether.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/core/libraries/bootstrap.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/ui/perfect-scrollbar.jquery.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/ui/unison.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/ui/blockUI.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/ui/jquery.matchHeight-min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/ui/jquery-sliding-menu.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/sliders/slick/slick.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/ui/screenfull.min.js" type="text/javascript"></script>

<script src="<%-template%>/robust-assets/js/plugins/forms/select/selectize.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/extensions/sweetalert.min.js" type="text/javascript"></script>
<!-- /build-->
<!-- BEGIN VENDOR JS-->
<!-- BEGIN PAGE VENDOR JS-->
<script src="<%-template%>/robust-assets/js/plugins/extensions/jquery.steps.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/pickers/dateTime/moment-with-locales.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/pickers/daterange/daterangepicker.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/forms/validation/jquery.validate.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/tables/jquery.dataTables.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/tables/datatable/dataTables.bootstrap4.min.js"
    type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/tables/datatable/dataTables.buttons.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/tables/buttons.flash.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/tables/jszip.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/tables/pdfmake.min.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/tables/vfs_fonts.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/plugins/tables/buttons.html5.min.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/plugins/tables/buttons.print.min.js" type="text/javascript">
</script>
<!-- END PAGE VENDOR JS-->
<!-- BEGIN ROBUST JS-->
<!-- build:js robust-assets/js/app.min.js-->
<script src="<%-template%>/robust-assets/js/core/robust-menu.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/core/robust.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/components/ui/fullscreenSearch.js" type="text/javascript"></script>
<!-- /build-->
<!-- END ROBUST JS-->
<!-- BEGIN PAGE LEVEL JS-->
<script src="<%-template%>/robust-assets/js/components/tables/datatables/datatable-advanced.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/components/modal/components-modal.js" type="text/javascript">
</script>
<script src="<%-template%>/robust-assets/js/components/tooltip/tooltip.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/components/forms/wizard-steps.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/components/forms/checkbox-radio.js" type="text/javascript"></script>
<script src="<%-template%>/robust-assets/js/components/extensions/sweet-alerts.js" type="text/javascript"></script>

<script src="<%-template%>/robust-assets/js/components/forms/select/form-selectize.js" type="text/javascript"></script>

<script>
    
    var SOURCE = undefined;

    function setCookie(cname, cvalue, exdays = 1) {
        var d = new Date();
        d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
        var expires = "expires=" + d.toUTCString();
        document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
    }
    setCookie('filemanager', JSON.stringify({}));

    function getCookie(cname) {
        return JSON.parse(_getCookie(cname));
    }

    function _getCookie(cname) {
        var name = cname + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function filemanager(_this) {
        setCookie('filemanager', JSON.stringify({}));
        SOURCE= undefined;
        let source = $(_this).attr('soruce');
        // let id = $(_this).attr('forInput');
        let random = Math.random().toString();
        $($(_this).closest('div.input-group')['0']).attr('id', random);
        let id = $('div[id="'+ random +'"] input.master').attr('id');
        SOURCE = $($('input[id="' + id + '"]')['0']);
        // $(SOURCE).css('background-color', 'red')
        $('div#iframeSpace').html(
            `<iframe src="http://192.168.1.106:8082" style="height: -webkit-fill-available;" width="100%"></iframe>`
        );
        $('#btn-filemanager').click();
    }
    $('body').click(() => {
        let cookie = getCookie('filemanager') || {};
        if (SOURCE && Object.keys(cookie).length != 0) {
            let selectorData = [];
            for (const e of Object.keys(cookie)) {
                if (cookie[e] === true) {
                    selectorData.push(e);
                }
            }
            const __keys = selectorData;
            if (__keys.length != 0) {
                if ($(SOURCE).prop("tagName").toLowerCase() == 'input') {
                    $(SOURCE).val('/upload' + __keys[0].replace(/\./g, '__DOT__'));
                    let findIDSlave = $($(SOURCE).closest('div.input-group')['0']).attr('id')
                    
                    

                    let __ID__ = $('div[id="'+ findIDSlave +'"] input.slave').attr('id');
                    $($('input[id="'+ __ID__ +'"]')['0']).val(__keys[0].split('/').pop());
                } else {

                }
            }
            SOURCE = undefined;
        }
    });
</script>
<script>
    /*
     * htmlson.js v.1 (Adalen VLADI, Redjan Ymeraj) | MIT
     * Github: https://github.com/adalenv/htmlson.js
     */

    (function ($) {
        $.fn.htmlson = function (configs) {
            var scope = this;
            var autoHeaderKeys = [];
            var thead = '';
            var tbody = '';

            /***** Start parse configurations *****/
            if (typeof configs.data !== "object") {
                console.error("htmlson.js Error: No data passed!");
                return;
            }

            if (typeof configs.headers !== "object") {
                configs.headers = {};
            }

            if (typeof configs.debug !== "boolean") {
                configs.debug = false;
            }
            /***** End parse configurations *****/

            function initialize() {
                // validate the
                if ($.isEmptyObject(configs.data)) {
                    // set empty table
                    scope.html('');
                    return;
                }

                /***** Start set headers *****/
                thead = '<thead>';

                autoHeaderKeys = Object.keys(configs.data[0]);

                for (var i = 0; i < autoHeaderKeys.length; i++) {
                    if (configs.headers[i] === undefined) {
                        thead += '<th>' + autoHeaderKeys[i] +
                            '</th>'; //if auto header
                    } else {
                        thead += '<th>' + configs.headers[i] +
                            '</th>'; //if user defined header
                    }
                }

                thead += '</thead>';
                /***** End set headers *****/

                /***** Start set body *****/
                tbody = '<tbody>';

                for (var i in configs.data) {
                    tbody += '<tr>';

                    var array = $.map(configs.data[i], function (value,
                        index) {
                        return value;
                    });

                    console.log('$$$$$$$$$$$$$$$$$$$$$$$$$', array);

                    for (var j in array) {
                        if (!isObject(array[j])) { //if not object
                            tbody += '<td>' + array[j] + '</td>'
                        } else { //if object convert to ul
                            tbody += '<td name="' + autoHeaderKeys[j] + '"><ul>';
                            var ob_key = $.map(array[j], function (
                                value, index) {
                                return index;
                            });
                            var ob = $.map(array[j], function (
                                value, index) {
                                return value;
                            });
                            for (var h in ob) {
                                const temp =
                                    `rerender(this, ${JSON.stringify(ob[h])}, '${ob_key[h]}', '${autoHeaderKeys[j]}')`
                                    .replace(/\"/g, '\'')
                                const value = typeof ob[h] == 'object' ? map('table', {
                                    title: ob_key[h],
                                    onclick: temp
                                }) : ob[h];
                                const _value = typeof ob[h] == 'object' ? '' : '';
                                tbody += '<li class="help" ' + _value + ' title="' + ob_key[h] + '" name="' +
                                    ob_key[h] + '">' + value + '</li>';
                            }
                            tbody += '</ul></td>';
                        }
                    }

                    tbody += '</tr>';
                }

                tbody += '</tbody>';

                /***** End set body *****/

                /***** Start generate output *****/
                scope.html(thead + tbody);
                /***** End generate output *****/
            }

            initialize();

            /**
             * Add new row on table
             *
             * @param object
             */
            scope.addRow = function (object) {
                if (isObject(object) === false) {
                    console.error(
                        "htmlson.js Error: New row must be of type object!"
                    );
                    return;
                }

                configs.data.push(object);

                // restart table rendering
                initialize();
            };

            /**
             * Add new row on table
             *
             * @param index
             */
            scope.removeRow = function (index) {
                if (typeof configs.data[index] === "undefined") {
                    console.error("htmlson.js Error: invalid!");
                    return;
                }

                configs.data.splice(index, 1);

                // restart table rendering
                initialize();
            };

            /**
             * Convert html table to json
             */
            scope.toJson = function () {
                var head = this.find('tr:first').get().map(function (
                    row) {
                    return $(row).find('th').get()
                        .map(function (cell) {
                            return $(
                                    cell
                                )
                                .html();
                        });
                });
                var body = this.find('tr').not('tr:first').get().map(
                    function (row) {
                        return $(row).find('td').get()
                            .map(function (cell) {
                                return $(
                                        cell
                                    )
                                    .html();
                            });
                    });

                var a = {};
                a.head = head;
                a.body = body;

                return a;

            };



            /***** Start debug *****/
            if (configs.debug) {
                var log = function (l) {
                    console.log(l);
                };
                log('Debug: true');
                log('Object: ' + JSON.stringify(configs.data));
                log('Object depth: ' + getDepth(configs.data));
                log('Auto headers: ' + JSON.stringify(autoHeaderKeys));
                log('Headers set: ' + JSON.stringify(configs.headers));
                log('Table head: ' + thead);
                log('Table body: ' + tbody);
            }
            /***** End debug *****/

            /***** Helper methods *****/
            function isObject(value) {
                return value && typeof value === 'object' && value
                    .constructor === Object;
            }

            function getDepth(obj) {
                var depth = 0;
                if (obj.children) {
                    obj.children.forEach(function (d) {
                        var tmpDepth = getDepth(d);

                        if (tmpDepth > depth) {
                            depth = tmpDepth
                        }
                    })
                }
                return 1 + depth
            }
            /***** Helper methods *****/

            return scope;
        };
    }(jQuery));
    var link = 'https://raw.githubusercontent.com/adalenv/htmlson.js/master/tests/exampleData.json';

    function addRow() {
        testTable.addRow({
            "id": 99,
            "first_name": {
                "name": "mmd",
                "fullname": "cloner!"
            },
            "last_name": "Danihel",
            "email": "gdanihel3@yandex.al",
            "gender": "Female",
            "ip_address": "98.98.209.0"
        });
    }

    function removeFirstRow() {
        testTable.removeRow(0); //you can channge it
    }

    function convertToJson() {
        var obj = testTable.toJson();
        console.log(obj);
        $('.echoJson').html(JSON.stringify(obj));
    }
</script>
<script>
    function deep(selector) {
        let i = 1;
        for (i = 1; true; i++) {
            i += $(selector).prevAll().length
            selector = $(selector).parent();
            if (selector[0].nodeName.toLocaleLowerCase() == 'html') {
                break;
            }
        }
        console.log('FUNCTION', i)
        return i;
    }

    var log = console.log;
    console.log = () => null;
</script>